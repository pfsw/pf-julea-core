plugins {
  id 'signing'
}

apply plugin: 'java-library'

group = 'org.pfsw'
version = '1.0.0'

ext {
  javaVersion = '8'
  javaModuleNameSuffix = 'julea-core'
  autoModuleName = "${group}.${javaModuleNameSuffix}"
  libDisplayName = "PF JUnit Log Event Assertion Core"
  libDescription = "Library for asserting log events during junit testing"
    
  repoUrlThirdParty = project.hasProperty('thirdPartyRepoUrl') ? project.getProperty('thirdPartyRepoUrl') : ''
  repoUrlReleases = project.hasProperty('pfswReleaseRepoUrl') ? project.getProperty('pfswReleaseRepoUrl') : ''
  ossrhUrlStaging = project.hasProperty('ossrhStagingRepoUrl') ? project.getProperty('ossrhStagingRepoUrl') : ''
  ossrhUrlSnapshots = project.hasProperty('ossrhSnapshotsRepoUrl') ? project.getProperty('ossrhSnapshotsRepoUrl') : ''
    
  nexusReleaseRepoUrl = repoUrlReleases
  nexusUsername = project.hasProperty('repo_user_name') ? project.getProperty('repo_user_name') : "master"
  nexusPassword = project.hasProperty('repo_user_password') ? project.getProperty('repo_user_password') : "desaster"

  localReleasePath = project.hasProperty('localReleasesDir') ? project.getProperty('localReleasesDir') : System.env['PF_RELEASES_REPO']
  
  sourceEncoding = project.hasProperty('source_encoding') ? project.getProperty('source_encoding') : 'UTF-8'
  islocalDevelopment = project.hasProperty('local_development') ? 'true'.equals(project.getProperty('local_development')) : false
  publishWithTests = false
  publishWithoutDependencies = true
  publishFixScopeCompile = true // not really relevant
  publishFixScopeProvided = true // not really relevant

  junit4Version = '4.13.2'
  junit5Version = '5.11.0'
}
archivesBaseName = "pf-${javaModuleNameSuffix}"

configurations {
    provided
    implementation.extendsFrom(provided)
}

apply from: "${pfswGradleIncludePath}/java/publishing-java-full.gradle"

signing {
  sign publishing.publications.mavenJava
}

dependencies {
  provided group: 'junit', name: 'junit', version: junit4Version
  provided group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junit5Version
  
  testImplementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.36'
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junit5Version
}

project.sourceCompatibility = javaVersion
project.targetCompatibility = javaVersion

tasks.withType(JavaCompile) {
  sourceCompatibility = javaVersion
  targetCompatibility = javaVersion
  options*.encoding = project.ext.sourceEncoding
  options.compilerArgs << "-Xlint:unchecked"
}

tasks.withType(Javadoc) {
  options.addStringOption('Xdoclint:none', '-quiet')
}

repositories {
  if (islocalDevelopment)
  {
    mavenLocal()
  }
  maven { 
    url repoUrlThirdParty 
  }
}

wrapper { gradleVersion = '6.9' }

println "${libDisplayName}: ${project.name} ${project.version} (moduleName:${autoModuleName}) ; Java ${javaVersion}"
println "Include path: ${pfswGradleIncludePath}"